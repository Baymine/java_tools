/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rsa.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2024-11-11")
public class TBDPUserInfo implements org.apache.thrift.TBase<TBDPUserInfo, TBDPUserInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TBDPUserInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TBDPUserInfo");

  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SCRAMBLED_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("scrambledPassword", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ERP_FIELD_DESC = new org.apache.thrift.protocol.TField("erp", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField HADOOP_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hadoopUserName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USER_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("userToken", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CATALOG_FIELD_DESC = new org.apache.thrift.protocol.TField("catalog", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField BUSINESS_LINE_FIELD_DESC = new org.apache.thrift.protocol.TField("businessLine", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TBDPUserInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TBDPUserInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String source; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer scrambledPassword; // required
  public @org.apache.thrift.annotation.Nullable String erp; // optional
  public @org.apache.thrift.annotation.Nullable String hadoopUserName; // optional
  public @org.apache.thrift.annotation.Nullable String userToken; // optional
  public @org.apache.thrift.annotation.Nullable String catalog; // optional
  public @org.apache.thrift.annotation.Nullable String db; // optional
  public @org.apache.thrift.annotation.Nullable String userType; // optional
  public @org.apache.thrift.annotation.Nullable String businessLine; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SOURCE((short)1, "source"),
    SCRAMBLED_PASSWORD((short)2, "scrambledPassword"),
    ERP((short)3, "erp"),
    HADOOP_USER_NAME((short)4, "hadoopUserName"),
    USER_TOKEN((short)5, "userToken"),
    CATALOG((short)6, "catalog"),
    DB((short)7, "db"),
    USER_TYPE((short)8, "userType"),
    BUSINESS_LINE((short)9, "businessLine");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SOURCE
          return SOURCE;
        case 2: // SCRAMBLED_PASSWORD
          return SCRAMBLED_PASSWORD;
        case 3: // ERP
          return ERP;
        case 4: // HADOOP_USER_NAME
          return HADOOP_USER_NAME;
        case 5: // USER_TOKEN
          return USER_TOKEN;
        case 6: // CATALOG
          return CATALOG;
        case 7: // DB
          return DB;
        case 8: // USER_TYPE
          return USER_TYPE;
        case 9: // BUSINESS_LINE
          return BUSINESS_LINE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.ERP, _Fields.HADOOP_USER_NAME, _Fields.USER_TOKEN, _Fields.CATALOG, _Fields.DB, _Fields.USER_TYPE, _Fields.BUSINESS_LINE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.REQUIRED,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCRAMBLED_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("scrambledPassword", org.apache.thrift.TFieldRequirementType.REQUIRED,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.ERP, new org.apache.thrift.meta_data.FieldMetaData("erp", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HADOOP_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("hadoopUserName", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("userToken", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATALOG, new org.apache.thrift.meta_data.FieldMetaData("catalog", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_LINE, new org.apache.thrift.meta_data.FieldMetaData("businessLine", org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TBDPUserInfo.class, metaDataMap);
  }

  public TBDPUserInfo() {
  }

  public TBDPUserInfo(
          String source,
          java.nio.ByteBuffer scrambledPassword)
  {
    this();
    this.source = source;
    this.scrambledPassword = org.apache.thrift.TBaseHelper.copyBinary(scrambledPassword);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TBDPUserInfo(TBDPUserInfo other) {
    if (other.isSetSource()) {
      this.source = other.source;
    }
    if (other.isSetScrambledPassword()) {
      this.scrambledPassword = org.apache.thrift.TBaseHelper.copyBinary(other.scrambledPassword);
    }
    if (other.isSetErp()) {
      this.erp = other.erp;
    }
    if (other.isSetHadoopUserName()) {
      this.hadoopUserName = other.hadoopUserName;
    }
    if (other.isSetUserToken()) {
      this.userToken = other.userToken;
    }
    if (other.isSetCatalog()) {
      this.catalog = other.catalog;
    }
    if (other.isSetDb()) {
      this.db = other.db;
    }
    if (other.isSetUserType()) {
      this.userType = other.userType;
    }
    if (other.isSetBusinessLine()) {
      this.businessLine = other.businessLine;
    }
  }

  public TBDPUserInfo deepCopy() {
    return new TBDPUserInfo(this);
  }

  @Override
  public void clear() {
    this.source = null;
    this.scrambledPassword = null;
    this.erp = null;
    this.hadoopUserName = null;
    this.userToken = null;
    this.catalog = null;
    this.db = null;
    this.userType = null;
    this.businessLine = null;
  }

  @org.apache.thrift.annotation.Nullable
  public String getSource() {
    return this.source;
  }

  public TBDPUserInfo setSource(@org.apache.thrift.annotation.Nullable String source) {
    this.source = source;
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public byte[] getScrambledPassword() {
    setScrambledPassword(org.apache.thrift.TBaseHelper.rightSize(scrambledPassword));
    return scrambledPassword == null ? null : scrambledPassword.array();
  }

  public java.nio.ByteBuffer bufferForScrambledPassword() {
    return org.apache.thrift.TBaseHelper.copyBinary(scrambledPassword);
  }

  public TBDPUserInfo setScrambledPassword(byte[] scrambledPassword) {
    this.scrambledPassword = scrambledPassword == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(scrambledPassword.clone());
    return this;
  }

  public TBDPUserInfo setScrambledPassword(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer scrambledPassword) {
    this.scrambledPassword = org.apache.thrift.TBaseHelper.copyBinary(scrambledPassword);
    return this;
  }

  public void unsetScrambledPassword() {
    this.scrambledPassword = null;
  }

  /** Returns true if field scrambledPassword is set (has been assigned a value) and false otherwise */
  public boolean isSetScrambledPassword() {
    return this.scrambledPassword != null;
  }

  public void setScrambledPasswordIsSet(boolean value) {
    if (!value) {
      this.scrambledPassword = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getErp() {
    return this.erp;
  }

  public TBDPUserInfo setErp(@org.apache.thrift.annotation.Nullable String erp) {
    this.erp = erp;
    return this;
  }

  public void unsetErp() {
    this.erp = null;
  }

  /** Returns true if field erp is set (has been assigned a value) and false otherwise */
  public boolean isSetErp() {
    return this.erp != null;
  }

  public void setErpIsSet(boolean value) {
    if (!value) {
      this.erp = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getHadoopUserName() {
    return this.hadoopUserName;
  }

  public TBDPUserInfo setHadoopUserName(@org.apache.thrift.annotation.Nullable String hadoopUserName) {
    this.hadoopUserName = hadoopUserName;
    return this;
  }

  public void unsetHadoopUserName() {
    this.hadoopUserName = null;
  }

  /** Returns true if field hadoopUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetHadoopUserName() {
    return this.hadoopUserName != null;
  }

  public void setHadoopUserNameIsSet(boolean value) {
    if (!value) {
      this.hadoopUserName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getUserToken() {
    return this.userToken;
  }

  public TBDPUserInfo setUserToken(@org.apache.thrift.annotation.Nullable String userToken) {
    this.userToken = userToken;
    return this;
  }

  public void unsetUserToken() {
    this.userToken = null;
  }

  /** Returns true if field userToken is set (has been assigned a value) and false otherwise */
  public boolean isSetUserToken() {
    return this.userToken != null;
  }

  public void setUserTokenIsSet(boolean value) {
    if (!value) {
      this.userToken = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getCatalog() {
    return this.catalog;
  }

  public TBDPUserInfo setCatalog(@org.apache.thrift.annotation.Nullable String catalog) {
    this.catalog = catalog;
    return this;
  }

  public void unsetCatalog() {
    this.catalog = null;
  }

  /** Returns true if field catalog is set (has been assigned a value) and false otherwise */
  public boolean isSetCatalog() {
    return this.catalog != null;
  }

  public void setCatalogIsSet(boolean value) {
    if (!value) {
      this.catalog = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getDb() {
    return this.db;
  }

  public TBDPUserInfo setDb(@org.apache.thrift.annotation.Nullable String db) {
    this.db = db;
    return this;
  }

  public void unsetDb() {
    this.db = null;
  }

  /** Returns true if field db is set (has been assigned a value) and false otherwise */
  public boolean isSetDb() {
    return this.db != null;
  }

  public void setDbIsSet(boolean value) {
    if (!value) {
      this.db = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getUserType() {
    return this.userType;
  }

  public TBDPUserInfo setUserType(@org.apache.thrift.annotation.Nullable String userType) {
    this.userType = userType;
    return this;
  }

  public void unsetUserType() {
    this.userType = null;
  }

  /** Returns true if field userType is set (has been assigned a value) and false otherwise */
  public boolean isSetUserType() {
    return this.userType != null;
  }

  public void setUserTypeIsSet(boolean value) {
    if (!value) {
      this.userType = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getBusinessLine() {
    return this.businessLine;
  }

  public TBDPUserInfo setBusinessLine(@org.apache.thrift.annotation.Nullable String businessLine) {
    this.businessLine = businessLine;
    return this;
  }

  public void unsetBusinessLine() {
    this.businessLine = null;
  }

  /** Returns true if field businessLine is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessLine() {
    return this.businessLine != null;
  }

  public void setBusinessLineIsSet(boolean value) {
    if (!value) {
      this.businessLine = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
      case SOURCE:
        if (value == null) {
          unsetSource();
        } else {
          setSource((String)value);
        }
        break;

      case SCRAMBLED_PASSWORD:
        if (value == null) {
          unsetScrambledPassword();
        } else {
          if (value instanceof byte[]) {
            setScrambledPassword((byte[])value);
          } else {
            setScrambledPassword((java.nio.ByteBuffer)value);
          }
        }
        break;

      case ERP:
        if (value == null) {
          unsetErp();
        } else {
          setErp((String)value);
        }
        break;

      case HADOOP_USER_NAME:
        if (value == null) {
          unsetHadoopUserName();
        } else {
          setHadoopUserName((String)value);
        }
        break;

      case USER_TOKEN:
        if (value == null) {
          unsetUserToken();
        } else {
          setUserToken((String)value);
        }
        break;

      case CATALOG:
        if (value == null) {
          unsetCatalog();
        } else {
          setCatalog((String)value);
        }
        break;

      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((String)value);
        }
        break;

      case USER_TYPE:
        if (value == null) {
          unsetUserType();
        } else {
          setUserType((String)value);
        }
        break;

      case BUSINESS_LINE:
        if (value == null) {
          unsetBusinessLine();
        } else {
          setBusinessLine((String)value);
        }
        break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
      case SOURCE:
        return getSource();

      case SCRAMBLED_PASSWORD:
        return getScrambledPassword();

      case ERP:
        return getErp();

      case HADOOP_USER_NAME:
        return getHadoopUserName();

      case USER_TOKEN:
        return getUserToken();

      case CATALOG:
        return getCatalog();

      case DB:
        return getDb();

      case USER_TYPE:
        return getUserType();

      case BUSINESS_LINE:
        return getBusinessLine();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
      case SOURCE:
        return isSetSource();
      case SCRAMBLED_PASSWORD:
        return isSetScrambledPassword();
      case ERP:
        return isSetErp();
      case HADOOP_USER_NAME:
        return isSetHadoopUserName();
      case USER_TOKEN:
        return isSetUserToken();
      case CATALOG:
        return isSetCatalog();
      case DB:
        return isSetDb();
      case USER_TYPE:
        return isSetUserType();
      case BUSINESS_LINE:
        return isSetBusinessLine();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof TBDPUserInfo)
      return this.equals((TBDPUserInfo)that);
    return false;
  }

  public boolean equals(TBDPUserInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_scrambledPassword = true && this.isSetScrambledPassword();
    boolean that_present_scrambledPassword = true && that.isSetScrambledPassword();
    if (this_present_scrambledPassword || that_present_scrambledPassword) {
      if (!(this_present_scrambledPassword && that_present_scrambledPassword))
        return false;
      if (!this.scrambledPassword.equals(that.scrambledPassword))
        return false;
    }

    boolean this_present_erp = true && this.isSetErp();
    boolean that_present_erp = true && that.isSetErp();
    if (this_present_erp || that_present_erp) {
      if (!(this_present_erp && that_present_erp))
        return false;
      if (!this.erp.equals(that.erp))
        return false;
    }

    boolean this_present_hadoopUserName = true && this.isSetHadoopUserName();
    boolean that_present_hadoopUserName = true && that.isSetHadoopUserName();
    if (this_present_hadoopUserName || that_present_hadoopUserName) {
      if (!(this_present_hadoopUserName && that_present_hadoopUserName))
        return false;
      if (!this.hadoopUserName.equals(that.hadoopUserName))
        return false;
    }

    boolean this_present_userToken = true && this.isSetUserToken();
    boolean that_present_userToken = true && that.isSetUserToken();
    if (this_present_userToken || that_present_userToken) {
      if (!(this_present_userToken && that_present_userToken))
        return false;
      if (!this.userToken.equals(that.userToken))
        return false;
    }

    boolean this_present_catalog = true && this.isSetCatalog();
    boolean that_present_catalog = true && that.isSetCatalog();
    if (this_present_catalog || that_present_catalog) {
      if (!(this_present_catalog && that_present_catalog))
        return false;
      if (!this.catalog.equals(that.catalog))
        return false;
    }

    boolean this_present_db = true && this.isSetDb();
    boolean that_present_db = true && that.isSetDb();
    if (this_present_db || that_present_db) {
      if (!(this_present_db && that_present_db))
        return false;
      if (!this.db.equals(that.db))
        return false;
    }

    boolean this_present_userType = true && this.isSetUserType();
    boolean that_present_userType = true && that.isSetUserType();
    if (this_present_userType || that_present_userType) {
      if (!(this_present_userType && that_present_userType))
        return false;
      if (!this.userType.equals(that.userType))
        return false;
    }

    boolean this_present_businessLine = true && this.isSetBusinessLine();
    boolean that_present_businessLine = true && that.isSetBusinessLine();
    if (this_present_businessLine || that_present_businessLine) {
      if (!(this_present_businessLine && that_present_businessLine))
        return false;
      if (!this.businessLine.equals(that.businessLine))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSource()) ? 131071 : 524287);
    if (isSetSource())
      hashCode = hashCode * 8191 + source.hashCode();

    hashCode = hashCode * 8191 + ((isSetScrambledPassword()) ? 131071 : 524287);
    if (isSetScrambledPassword())
      hashCode = hashCode * 8191 + scrambledPassword.hashCode();

    hashCode = hashCode * 8191 + ((isSetErp()) ? 131071 : 524287);
    if (isSetErp())
      hashCode = hashCode * 8191 + erp.hashCode();

    hashCode = hashCode * 8191 + ((isSetHadoopUserName()) ? 131071 : 524287);
    if (isSetHadoopUserName())
      hashCode = hashCode * 8191 + hadoopUserName.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserToken()) ? 131071 : 524287);
    if (isSetUserToken())
      hashCode = hashCode * 8191 + userToken.hashCode();

    hashCode = hashCode * 8191 + ((isSetCatalog()) ? 131071 : 524287);
    if (isSetCatalog())
      hashCode = hashCode * 8191 + catalog.hashCode();

    hashCode = hashCode * 8191 + ((isSetDb()) ? 131071 : 524287);
    if (isSetDb())
      hashCode = hashCode * 8191 + db.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserType()) ? 131071 : 524287);
    if (isSetUserType())
      hashCode = hashCode * 8191 + userType.hashCode();

    hashCode = hashCode * 8191 + ((isSetBusinessLine()) ? 131071 : 524287);
    if (isSetBusinessLine())
      hashCode = hashCode * 8191 + businessLine.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TBDPUserInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetSource(), other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetScrambledPassword(), other.isSetScrambledPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScrambledPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scrambledPassword, other.scrambledPassword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetErp(), other.isSetErp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.erp, other.erp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetHadoopUserName(), other.isSetHadoopUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHadoopUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hadoopUserName, other.hadoopUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetUserToken(), other.isSetUserToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userToken, other.userToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetCatalog(), other.isSetCatalog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatalog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalog, other.catalog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetDb(), other.isSetDb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetUserType(), other.isSetUserType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetBusinessLine(), other.isSetBusinessLine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessLine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessLine, other.businessLine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TBDPUserInfo(");
    boolean first = true;

    sb.append("source:");
    if (this.source == null) {
      sb.append("null");
    } else {
      sb.append(this.source);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scrambledPassword:");
    if (this.scrambledPassword == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.scrambledPassword, sb);
    }
    first = false;
    if (isSetErp()) {
      if (!first) sb.append(", ");
      sb.append("erp:");
      if (this.erp == null) {
        sb.append("null");
      } else {
        sb.append(this.erp);
      }
      first = false;
    }
    if (isSetHadoopUserName()) {
      if (!first) sb.append(", ");
      sb.append("hadoopUserName:");
      if (this.hadoopUserName == null) {
        sb.append("null");
      } else {
        sb.append(this.hadoopUserName);
      }
      first = false;
    }
    if (isSetUserToken()) {
      if (!first) sb.append(", ");
      sb.append("userToken:");
      if (this.userToken == null) {
        sb.append("null");
      } else {
        sb.append(this.userToken);
      }
      first = false;
    }
    if (isSetCatalog()) {
      if (!first) sb.append(", ");
      sb.append("catalog:");
      if (this.catalog == null) {
        sb.append("null");
      } else {
        sb.append(this.catalog);
      }
      first = false;
    }
    if (isSetDb()) {
      if (!first) sb.append(", ");
      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
    }
    if (isSetUserType()) {
      if (!first) sb.append(", ");
      sb.append("userType:");
      if (this.userType == null) {
        sb.append("null");
      } else {
        sb.append(this.userType);
      }
      first = false;
    }
    if (isSetBusinessLine()) {
      if (!first) sb.append(", ");
      sb.append("businessLine:");
      if (this.businessLine == null) {
        sb.append("null");
      } else {
        sb.append(this.businessLine);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (source == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'source' was not present! Struct: " + toString());
    }
    if (scrambledPassword == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'scrambledPassword' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TBDPUserInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TBDPUserInfoStandardScheme getScheme() {
      return new TBDPUserInfoStandardScheme();
    }
  }

  private static class TBDPUserInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TBDPUserInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TBDPUserInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.source = iprot.readString();
              struct.setSourceIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCRAMBLED_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scrambledPassword = iprot.readBinary();
              struct.setScrambledPasswordIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ERP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.erp = iprot.readString();
              struct.setErpIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HADOOP_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hadoopUserName = iprot.readString();
              struct.setHadoopUserNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userToken = iprot.readString();
              struct.setUserTokenIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CATALOG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.catalog = iprot.readString();
              struct.setCatalogIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db = iprot.readString();
              struct.setDbIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // USER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userType = iprot.readString();
              struct.setUserTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BUSINESS_LINE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessLine = iprot.readString();
              struct.setBusinessLineIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TBDPUserInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.source != null) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeString(struct.source);
        oprot.writeFieldEnd();
      }
      if (struct.scrambledPassword != null) {
        oprot.writeFieldBegin(SCRAMBLED_PASSWORD_FIELD_DESC);
        oprot.writeBinary(struct.scrambledPassword);
        oprot.writeFieldEnd();
      }
      if (struct.erp != null) {
        if (struct.isSetErp()) {
          oprot.writeFieldBegin(ERP_FIELD_DESC);
          oprot.writeString(struct.erp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hadoopUserName != null) {
        if (struct.isSetHadoopUserName()) {
          oprot.writeFieldBegin(HADOOP_USER_NAME_FIELD_DESC);
          oprot.writeString(struct.hadoopUserName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userToken != null) {
        if (struct.isSetUserToken()) {
          oprot.writeFieldBegin(USER_TOKEN_FIELD_DESC);
          oprot.writeString(struct.userToken);
          oprot.writeFieldEnd();
        }
      }
      if (struct.catalog != null) {
        if (struct.isSetCatalog()) {
          oprot.writeFieldBegin(CATALOG_FIELD_DESC);
          oprot.writeString(struct.catalog);
          oprot.writeFieldEnd();
        }
      }
      if (struct.db != null) {
        if (struct.isSetDb()) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          oprot.writeString(struct.db);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userType != null) {
        if (struct.isSetUserType()) {
          oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
          oprot.writeString(struct.userType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.businessLine != null) {
        if (struct.isSetBusinessLine()) {
          oprot.writeFieldBegin(BUSINESS_LINE_FIELD_DESC);
          oprot.writeString(struct.businessLine);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TBDPUserInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TBDPUserInfoTupleScheme getScheme() {
      return new TBDPUserInfoTupleScheme();
    }
  }

  private static class TBDPUserInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TBDPUserInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TBDPUserInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.source);
      oprot.writeBinary(struct.scrambledPassword);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetErp()) {
        optionals.set(0);
      }
      if (struct.isSetHadoopUserName()) {
        optionals.set(1);
      }
      if (struct.isSetUserToken()) {
        optionals.set(2);
      }
      if (struct.isSetCatalog()) {
        optionals.set(3);
      }
      if (struct.isSetDb()) {
        optionals.set(4);
      }
      if (struct.isSetUserType()) {
        optionals.set(5);
      }
      if (struct.isSetBusinessLine()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetErp()) {
        oprot.writeString(struct.erp);
      }
      if (struct.isSetHadoopUserName()) {
        oprot.writeString(struct.hadoopUserName);
      }
      if (struct.isSetUserToken()) {
        oprot.writeString(struct.userToken);
      }
      if (struct.isSetCatalog()) {
        oprot.writeString(struct.catalog);
      }
      if (struct.isSetDb()) {
        oprot.writeString(struct.db);
      }
      if (struct.isSetUserType()) {
        oprot.writeString(struct.userType);
      }
      if (struct.isSetBusinessLine()) {
        oprot.writeString(struct.businessLine);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TBDPUserInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.source = iprot.readString();
      struct.setSourceIsSet(true);
      struct.scrambledPassword = iprot.readBinary();
      struct.setScrambledPasswordIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.erp = iprot.readString();
        struct.setErpIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hadoopUserName = iprot.readString();
        struct.setHadoopUserNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userToken = iprot.readString();
        struct.setUserTokenIsSet(true);
      }
      if (incoming.get(3)) {
        struct.catalog = iprot.readString();
        struct.setCatalogIsSet(true);
      }
      if (incoming.get(4)) {
        struct.db = iprot.readString();
        struct.setDbIsSet(true);
      }
      if (incoming.get(5)) {
        struct.userType = iprot.readString();
        struct.setUserTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.businessLine = iprot.readString();
        struct.setBusinessLineIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

